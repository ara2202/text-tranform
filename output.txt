Чтобы разобрать флаг 
y и понять, чем же он 
так хорош, рассмотрим 
практический пример.

Одна из часто встречаю-
щихся задач регулярных
выражений – «парсинг»:
мы имеем текст и с 
помощью регулярных 
выражений разделяем 
его на логические комп-
оненты, получаем струк-
туру.

Например, в браузерах 
существует HTML-парс-
ер, который превращает
текст в структурирован-
ный документ. Также 
существуют парсеры для
языков программирован-
ия, как JavaScript и 
любых других.

Мы не будем погружат-
ься глубоко в тему 
написания парсеров 
(это специализирован-
ная область со своим 
набором инструментов и
алгоритмов). Но в проц-
ессе их работы, вооб-
ще, в процессе анализа
текста, очень часто 
возникает вопрос: «Что
за сущность находится 
в тексте на заданной 
позиции?»

Например, для языка 
программирования вариа-
нты могут быть следующ-
ие:

Это название перемен-
ной или функции \w+?
Или число \d+?
Или оператор [+-/*]?
(Или же это синтаксиче-
ская ошибка, если не 
попадает ни под один 
из ожидаемых вариант-
ов)
Обычно поиск ищет в 
строке с начала, а не 
с нужной позиции. 
Можно, конечно, сдел-
ать подстроку и искать
в ней, но это приведёт
к очень существенному 
замедлению работы, так
как таких поисков 
много.

Ещё один вариант – 
использовать regexp.e-
xec с определённым 
свойством regexp.lastI-
ndex, но это тоже не 
совсем то, так как он 
ищет везде, начиная с 
lastIndex и далее.

Мы хотим проверять 
текст именно в той 
позиции, которую мы 
указали, а не «начин-
ая» с неё.

В примере показано 
(ошибочное) использова-
ние lastIndex: