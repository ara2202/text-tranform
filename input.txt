Чтобы разобрать флаг y и понять, чем же он так хорош, рассмотрим практический пример.

Одна из часто встречающихся задач регулярных выражений – «парсинг»: мы имеем текст и с помощью регулярных выражений разделяем его на логические компоненты, получаем структуру.

Например, в браузерах существует HTML-парсер, который превращает текст в структурированный документ. Также существуют парсеры для языков программирования, как JavaScript и любых других.

Мы не будем погружаться глубоко в тему написания парсеров (это специализированная область со своим набором инструментов и алгоритмов). Но в процессе их работы, вообще, в процессе анализа текста, очень часто возникает вопрос: «Что за сущность находится в тексте на заданной позиции?»

Например, для языка программирования варианты могут быть следующие:

Это название переменной или функции \w+?
Или число \d+?
Или оператор [+-/*]?
(Или же это синтаксическая ошибка, если не попадает ни под один из ожидаемых вариантов)
Обычно поиск ищет в строке с начала, а не с нужной позиции. Можно, конечно, сделать подстроку и искать в ней, но это приведёт к очень существенному замедлению работы, так как таких поисков много.

Ещё один вариант – использовать regexp.exec с определённым свойством regexp.lastIndex, но это тоже не совсем то, так как он ищет везде, начиная с lastIndex и далее.

Мы хотим проверять текст именно в той позиции, которую мы указали, а не «начиная» с неё.

В примере показано (ошибочное) использование lastIndex: